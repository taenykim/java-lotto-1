{"version":3,"sources":["modules/formValidator.ts","modules/Lotto.ts","modules/lottoFunctions.ts","modules/WinningLotto.ts","containers/App.tsx","index.tsx"],"names":["validateLottoNumber","lottoNumber","LOTTO_COUNT","LOTTO_NUMBERS","checkDuplicationLottoNumber","i","length","push","_lottoNumber","split","map","trim","lottoNumberHasString","match","indexOf","Number","Lotto","numbers","this","setRandomNumbers","takenLottoNumbers","resultNumbers","j","randomNumber","Math","floor","random","chosen","splice","WinningLotto","lotto","bonusNo","userLotto","count","bonusCount","number","App","RANKS","FIRST","SECOND","THIRD","FOURTH","FIFTH","MISS","useState","purchaseAmountIsBlankError","setPurchaseAmountIsBlankError","purchaseAmountIsNotNumberError","setPurchaseAmountIsNotNumberError","purchaseAmountIsLessThanMinimumAmountError","setPurchaseAmountIsLessThanMinimumAmountError","manualLottoCountIsBlankError","setManualLottoCountIsBlankError","manualLottoCountIsNotNumberError","setManualLottoCountIsNotNumberError","manualLottoCountIsGreaterThanLottoCountError","setManualLottoCountIsGreaterThanLottoCountError","manualLottoNumberIsBlankError","setManualLottoNumberIsBlankError","manualLottoNumberIsGreaterThanLottoCountError","setManualLottoNumberIsGreaterThanLottoCountError","manualLottoNumberIsLessThanLottoCountError","setManualLottoNumberIsLessThanLottoCountError","manualLottoNumberIsNotNumberError","setManualLottoNumberIsNotNumberError","manualLottoNumberIsNotBeInLottoScopeError","setManualLottoNumberIsNotBeInLottoScopeError","manualLottoNumberHasDuplicationNumberError","setManualLottoNumberHasDuplicationNumberError","winningLottoNumberIsBlankError","setWinningLottoNumberIsBlankError","winningLottoNumberIsGreaterThanLottoCountError","setWinningLottoNumberIsGreaterThanLottoCountError","winningLottoNumberIsLessThanLottoCountError","setWinningLottoNumberIsLessThanLottoCountError","winningLottoNumberIsNotNumberError","setWinningLottoNumberIsNotNumberError","winningLottoNumberIsNotBeInLottoScopeError","setWinningLottoNumberIsNotBeInLottoScopeError","winningLottoNumberHasDuplicationNumberError","setWinningLottoNumberHasDuplicationNumberError","bonusBallIsBlankError","setBonusBallIsBlankError","bonusBallIsNotNumberError","setBonusBallIsNotNumberError","bonusBallIsNotBeInLottoSopeError","setBonusBallIsNotBeInLottoSopeError","winningLottoNumberHasBounsBallError","setWinningLottoNumberHasBounsBallError","purchaseAmount","setPurchaseAmount","lottoCount","setLottoCount","gotALottoCount","setGotALottoCount","manualLottoCount","setManualLottoCount","manualLottos","setManualLottos","myLottos","setMyLottos","gotManualLottos","setGotManualLottos","winningLottoNumbers","setWinningLottoNumbers","bonusBall","setBonusBall","ranks","setRanks","gotResult","setGotResult","onChangeManualLottoNumber","e","manualLottoIndex","target","id","substr","value","onSubmit","preventDefault","validatedPurchaseAmount","lottoPrice","_purchaseAmount","purchaseAmountHasString","String","validatePurchaseAmountInput","htmlFor","type","onChange","style","color","validatedManualLottoCount","_manualLottoCount","manualLottoCountHasString","validateManualLottoCountInput","_manualLottos","validatedManualLottoNumber","_myLottos","sortedManualLottoNumbers","sort","a","b","automaticLottos","lottos","setLotto","manualLotto","key","width","myLotto","join","validatedWinningLottoNumber","validatedBonusBall","_bonusBall","bonusBallHasString","validateBonusBallInput","winningLotto","item","marginTop","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79055ea0.chunk.js","sourcesContent":["export const validatePurchaseAmountInput = (purchaseAmount: string, lottoPrice: number) => {\n  let _purchaseAmount = purchaseAmount.trim()\n\n  if (_purchaseAmount.length === 0) {\n    return 'PURCHASE_AMOUNT_IS_BLANK_ERROR'\n  }\n\n  const purchaseAmountHasString = _purchaseAmount && _purchaseAmount.match(/\\D/g)\n  if (purchaseAmountHasString !== null && purchaseAmountHasString.length >= 0) {\n    return 'PURCHASE_AMOUNT_IS_NOT_NUMBER_ERROR'\n  }\n  if (_purchaseAmount.length < String(lottoPrice).length) {\n    return 'PURCHASE_AMOUNT_IS_LESS_THAN_MINIMUM_AMOUNT_ERROR'\n  }\n\n  return _purchaseAmount\n}\n\nexport const validateManualLottoCountInput = (manualLottoCount: string, lottoCount: number) => {\n  let _manualLottoCount = manualLottoCount.trim()\n\n  if (_manualLottoCount.length === 0) {\n    return 'MANUAL_LOTTO_COUNT_IS_BLANK_ERROR'\n  }\n\n  const manualLottoCountHasString = _manualLottoCount && _manualLottoCount.match(/\\D/g)\n  if (manualLottoCountHasString !== null && manualLottoCountHasString.length >= 0) {\n    return 'MANUAL_LOTTO_COUNT_IS_NOT_NUMBER_ERROR'\n  }\n  if (Number(_manualLottoCount) > lottoCount) {\n    return 'MAMUAL_LOTTO_COUNT_IS_GREATER_THAN_LOTTO_COUNT_ERROR'\n  }\n\n  return _manualLottoCount\n}\n\nexport const validateLottoNumber = (\n  lottoNumber: string,\n  LOTTO_COUNT: number,\n  LOTTO_NUMBERS: number[]\n) => {\n  const checkDuplicationLottoNumber: boolean[] = []\n  for (let i = 1; i <= LOTTO_NUMBERS[LOTTO_NUMBERS.length - 1]; i++) {\n    checkDuplicationLottoNumber.push(false)\n  }\n\n  if (lottoNumber === '') {\n    return 'LOTTO_NUMBER_IS_BLANK_ERROR'\n  }\n\n  let _lottoNumber = lottoNumber.split(',')\n  _lottoNumber = _lottoNumber.map((lottoNumber) => lottoNumber.trim())\n\n  if (_lottoNumber.length > LOTTO_COUNT) {\n    return 'LOTTO_NUMBER_IS_GREATER_THAN_LOTTO_COUNT'\n  }\n  if (_lottoNumber.length < LOTTO_COUNT) {\n    return 'LOTTO_NUMBER_IS_LESS_THAN_LOTTO_COUNT'\n  }\n\n  for (let i = 0; i < _lottoNumber.length; i++) {\n    if (_lottoNumber[i] === '') {\n      return 'LOTTO_NUMBER_IS_BLANK_ERROR'\n    }\n    const lottoNumberHasString = _lottoNumber[i] && _lottoNumber[i].match(/\\D/g)\n    if (lottoNumberHasString !== null && lottoNumberHasString.length >= 0) {\n      return 'LOTTO_NUMBER_IS_NOT_NUMBER_ERROR'\n    }\n    if (LOTTO_NUMBERS.indexOf(Number(_lottoNumber[i])) < 0) {\n      return 'LOTTO_NUMBER_IS_NOT_BE_IN_LOTTO_SCOPE_ERROR'\n    }\n    if (checkDuplicationLottoNumber[Number(_lottoNumber[i])] === true) {\n      return 'LOTTO_NUMBER_HAS_DUPLICATION_NUMBER_ERROR'\n    }\n    checkDuplicationLottoNumber[Number(_lottoNumber[i])] = true\n  }\n\n  return _lottoNumber\n}\n\nexport const validateBonusBallInput = (\n  validatedWinningLottoNumber: string[],\n  bonusBall: string,\n  LOTTO_NUMBERS: number[]\n) => {\n  if (bonusBall === '') {\n    return 'BONUS_BALL_IS_BLANK_ERROR'\n  }\n  const _bonusBall = Number(bonusBall)\n\n  const bonusBallHasString = bonusBall.match(/\\D/g)\n  if (bonusBallHasString !== null && bonusBallHasString.length >= 0) {\n    return 'BONUS_BALL_IS_NOT_NUMBER_ERROR'\n  }\n  if (LOTTO_NUMBERS.indexOf(_bonusBall) < 0) {\n    return 'BONUS_BALL_IS_NOT_BE_IN_LOTTO_SCOPE_ERROR'\n  }\n  if (validatedWinningLottoNumber.indexOf(bonusBall) > 0) {\n    return 'WINNING_LOTTO_NUMBER_HAS_BONUS_BALL_ERROR'\n  }\n\n  return bonusBall\n}\n","export class Lotto {\n  numbers: number[] = []\n\n  constructor(numbers: number[]) {\n    this.numbers = numbers\n  }\n}\n","import { Lotto } from './Lotto'\n\nexport const setLotto = (lottoCount: number, LOTTO_NUMBERS: number[], LOTTO_COUNT: number) => {\n  const lottos: Lotto[] = []\n  for (let i = 0; i < lottoCount; i++) {\n    lottos.push(\n      new Lotto(setRandomNumbers(LOTTO_NUMBERS, LOTTO_COUNT).sort((a: number, b: number) => a - b))\n    )\n  }\n  return lottos\n}\n\nexport const setRandomNumbers = (LOTTO_NUMBERS: number[], LOTTO_COUNT: number) => {\n  let takenLottoNumbers = [...LOTTO_NUMBERS]\n  const resultNumbers: number[] = []\n  for (let j = 0; j < LOTTO_COUNT; j++) {\n    const randomNumber = Math.floor(Math.random() * (LOTTO_NUMBERS[LOTTO_NUMBERS.length - 1] - j))\n    const chosen = takenLottoNumbers.splice(randomNumber, 1)[0]\n    resultNumbers.push(Number(chosen))\n  }\n  return resultNumbers\n}\n","import { Lotto } from './Lotto'\n\nexport class WinningLotto {\n  lotto: Lotto\n  bonusNo: number = 0\n\n  constructor(lotto: Lotto, bonusNo: number) {\n    this.lotto = lotto\n    this.bonusNo = bonusNo\n  }\n\n  match(userLotto: Lotto) {\n    let count = 0\n    let bonusCount = 0\n    this.lotto.numbers.map((number) => {\n      userLotto.numbers.indexOf(number) >= 0 && count++\n    })\n    userLotto.numbers.indexOf(this.bonusNo) >= 0 && bonusCount++\n    if (count === 6) return 'FIRST'\n    if (count === 5 && bonusCount) return 'SECOND'\n    if (count + bonusCount === 5) return 'THIRD'\n    if (count + bonusCount === 4) return 'FOURTH'\n    if (count + bonusCount === 3) return 'FIFTH'\n    return 'MISS'\n  }\n}\n","import React, { useState } from 'react'\nimport {\n  validatePurchaseAmountInput,\n  validateManualLottoCountInput,\n  validateLottoNumber,\n  validateBonusBallInput,\n} from '../modules/formValidator'\nimport { Lotto } from '../modules/Lotto'\nimport { setLotto } from '../modules/lottoFunctions'\nimport { WinningLotto } from '../modules/WinningLotto'\n\nconst App = () => {\n  const LOTTO_PRICE = 1000\n  const LOTTO_COUNT = 6\n  const LOTTO_MAX_NUMBER = 45\n  const LOTTO_NUMBERS: number[] = []\n  for (let i = 0; i < LOTTO_MAX_NUMBER; i++) {\n    LOTTO_NUMBERS.push(i + 1)\n  }\n  const RANKS = {\n    FIRST: 0,\n    SECOND: 0,\n    THIRD: 0,\n    FOURTH: 0,\n    FIFTH: 0,\n    MISS: 0,\n  }\n\n  const [purchaseAmountIsBlankError, setPurchaseAmountIsBlankError] = useState(false)\n  const [purchaseAmountIsNotNumberError, setPurchaseAmountIsNotNumberError] = useState(false)\n  const [\n    purchaseAmountIsLessThanMinimumAmountError,\n    setPurchaseAmountIsLessThanMinimumAmountError,\n  ] = useState(false)\n  const [manualLottoCountIsBlankError, setManualLottoCountIsBlankError] = useState(false)\n  const [manualLottoCountIsNotNumberError, setManualLottoCountIsNotNumberError] = useState(false)\n  const [\n    manualLottoCountIsGreaterThanLottoCountError,\n    setManualLottoCountIsGreaterThanLottoCountError,\n  ] = useState(false)\n  const [manualLottoNumberIsBlankError, setManualLottoNumberIsBlankError] = useState(false)\n  const [\n    manualLottoNumberIsGreaterThanLottoCountError,\n    setManualLottoNumberIsGreaterThanLottoCountError,\n  ] = useState(false)\n  const [\n    manualLottoNumberIsLessThanLottoCountError,\n    setManualLottoNumberIsLessThanLottoCountError,\n  ] = useState(false)\n  const [manualLottoNumberIsNotNumberError, setManualLottoNumberIsNotNumberError] = useState(false)\n  const [\n    manualLottoNumberIsNotBeInLottoScopeError,\n    setManualLottoNumberIsNotBeInLottoScopeError,\n  ] = useState(false)\n  const [\n    manualLottoNumberHasDuplicationNumberError,\n    setManualLottoNumberHasDuplicationNumberError,\n  ] = useState(false)\n  const [winningLottoNumberIsBlankError, setWinningLottoNumberIsBlankError] = useState(false)\n  const [\n    winningLottoNumberIsGreaterThanLottoCountError,\n    setWinningLottoNumberIsGreaterThanLottoCountError,\n  ] = useState(false)\n  const [\n    winningLottoNumberIsLessThanLottoCountError,\n    setWinningLottoNumberIsLessThanLottoCountError,\n  ] = useState(false)\n  const [winningLottoNumberIsNotNumberError, setWinningLottoNumberIsNotNumberError] = useState(\n    false\n  )\n  const [\n    winningLottoNumberIsNotBeInLottoScopeError,\n    setWinningLottoNumberIsNotBeInLottoScopeError,\n  ] = useState(false)\n  const [\n    winningLottoNumberHasDuplicationNumberError,\n    setWinningLottoNumberHasDuplicationNumberError,\n  ] = useState(false)\n  const [bonusBallIsBlankError, setBonusBallIsBlankError] = useState(false)\n  const [bonusBallIsNotNumberError, setBonusBallIsNotNumberError] = useState(false)\n  const [bonusBallIsNotBeInLottoSopeError, setBonusBallIsNotBeInLottoSopeError] = useState(false)\n  const [winningLottoNumberHasBounsBallError, setWinningLottoNumberHasBounsBallError] = useState(\n    false\n  )\n\n  const [purchaseAmount, setPurchaseAmount] = useState('')\n  const [lottoCount, setLottoCount] = useState(0)\n  const [gotALottoCount, setGotALottoCount] = useState(false)\n  const [manualLottoCount, setManualLottoCount] = useState('')\n  const [manualLottos, setManualLottos] = useState<string[]>([])\n  const [myLottos, setMyLottos] = useState<Lotto[]>([])\n  const [gotManualLottos, setGotManualLottos] = useState(false)\n  const [winningLottoNumbers, setWinningLottoNumbers] = useState('')\n  const [bonusBall, setBonusBall] = useState('')\n  const [ranks, setRanks] = useState(RANKS)\n  const [gotResult, setGotResult] = useState(false)\n\n  const onChangePurchaseAmount = (e: any) => {\n    setPurchaseAmount(e.target.value)\n  }\n\n  const onChangeManualLottoCount = (e: any) => {\n    setManualLottoCount(e.target.value)\n  }\n\n  const onChangeWinningLottoNumbers = (e: any) => {\n    setWinningLottoNumbers(e.target.value)\n  }\n\n  const onChangeBonusBall = (e: any) => {\n    setBonusBall(e.target.value)\n  }\n\n  const onSubmitPurchaseAmount = (e: any) => {\n    e.preventDefault()\n    setPurchaseAmountIsBlankError(false)\n    setPurchaseAmountIsNotNumberError(false)\n    setPurchaseAmountIsLessThanMinimumAmountError(false)\n    setGotALottoCount(false)\n\n    const validatedPurchaseAmount = validatePurchaseAmountInput(purchaseAmount, LOTTO_PRICE)\n    if (validatedPurchaseAmount === 'PURCHASE_AMOUNT_IS_BLANK_ERROR') {\n      return setPurchaseAmountIsBlankError(true)\n    }\n    if (validatedPurchaseAmount === 'PURCHASE_AMOUNT_IS_NOT_NUMBER_ERROR') {\n      return setPurchaseAmountIsNotNumberError(true)\n    }\n    if (validatedPurchaseAmount === 'PURCHASE_AMOUNT_IS_LESS_THAN_MINIMUM_AMOUNT_ERROR') {\n      return setPurchaseAmountIsLessThanMinimumAmountError(true)\n    }\n    const _purchaseAmount = Number(validatedPurchaseAmount)\n    const lottoCount = Math.floor(_purchaseAmount / LOTTO_PRICE)\n    setLottoCount(lottoCount)\n    setGotALottoCount(true)\n  }\n\n  const onSubmitManualLottoCount = (e: any) => {\n    e.preventDefault()\n    setManualLottoCountIsBlankError(false)\n    setManualLottoCountIsNotNumberError(false)\n    setManualLottoCountIsGreaterThanLottoCountError(false)\n\n    const validatedManualLottoCount = validateManualLottoCountInput(manualLottoCount, lottoCount)\n    if (validatedManualLottoCount === 'MANUAL_LOTTO_COUNT_IS_BLANK_ERROR') {\n      return setManualLottoCountIsBlankError(true)\n    }\n    if (validatedManualLottoCount === 'MANUAL_LOTTO_COUNT_IS_NOT_NUMBER_ERROR') {\n      return setManualLottoCountIsNotNumberError(true)\n    }\n    if (validatedManualLottoCount === 'MAMUAL_LOTTO_COUNT_IS_GREATER_THAN_LOTTO_COUNT_ERROR') {\n      return setManualLottoCountIsGreaterThanLottoCountError(true)\n    }\n    const _manualLottos = []\n    for (let i = 0; i < Number(manualLottoCount); i++) {\n      _manualLottos.push('')\n    }\n    setManualLottos(_manualLottos)\n  }\n\n  const onChangeManualLottoNumber = (e: any) => {\n    const manualLottoIndex = Number(e.target.id.substr(17))\n    manualLottos[manualLottoIndex] = e.target.value\n    setManualLottos(manualLottos)\n  }\n\n  const onSubmitManualLottos = (e: any) => {\n    e.preventDefault()\n    setManualLottoNumberIsBlankError(false)\n    setManualLottoNumberIsGreaterThanLottoCountError(false)\n    setManualLottoNumberIsLessThanLottoCountError(false)\n    setManualLottoNumberIsNotNumberError(false)\n    setManualLottoNumberIsNotBeInLottoScopeError(false)\n\n    for (let i = 0; i < manualLottos.length; i++) {\n      const validatedManualLottoNumber = validateLottoNumber(\n        manualLottos[i],\n        LOTTO_COUNT,\n        LOTTO_NUMBERS\n      )\n      if (validatedManualLottoNumber === 'LOTTO_NUMBER_IS_BLANK_ERROR') {\n        return setManualLottoNumberIsBlankError(true)\n      }\n      if (validatedManualLottoNumber === 'LOTTO_NUMBER_IS_GREATER_THAN_LOTTO_COUNT') {\n        return setManualLottoNumberIsGreaterThanLottoCountError(true)\n      }\n      if (validatedManualLottoNumber === 'LOTTO_NUMBER_IS_LESS_THAN_LOTTO_COUNT') {\n        return setManualLottoNumberIsLessThanLottoCountError(true)\n      }\n      if (validatedManualLottoNumber === 'LOTTO_NUMBER_IS_NOT_NUMBER_ERROR') {\n        return setManualLottoNumberIsNotNumberError(true)\n      }\n      if (validatedManualLottoNumber === 'LOTTO_NUMBER_IS_NOT_BE_IN_LOTTO_SCOPE_ERROR') {\n        return setManualLottoNumberIsNotBeInLottoScopeError(true)\n      }\n      if (validatedManualLottoNumber === 'LOTTO_NUMBER_HAS_DUPLICATION_NUMBER_ERROR') {\n        return setManualLottoNumberHasDuplicationNumberError(true)\n      }\n    }\n    setGotManualLottos(true)\n    const _myLottos: Lotto[] = []\n    for (let i = 0; i < Number(manualLottoCount); i++) {\n      const _manualLotto = manualLottos[i].split(',')\n      const manualLottoNumbers = _manualLotto.map((lottoNumber) => Number(lottoNumber))\n      const sortedManualLottoNumbers = manualLottoNumbers.sort((a, b) => a - b)\n      _myLottos.push(new Lotto(sortedManualLottoNumbers))\n    }\n    const automaticLottos = setLotto(\n      lottoCount - Number(manualLottoCount),\n      LOTTO_NUMBERS,\n      LOTTO_COUNT\n    )\n    setMyLottos([..._myLottos, ...automaticLottos])\n  }\n\n  const onSubmitWinningLotto = (e: any) => {\n    e.preventDefault()\n    setWinningLottoNumberIsBlankError(false)\n    setWinningLottoNumberIsGreaterThanLottoCountError(false)\n    setWinningLottoNumberIsLessThanLottoCountError(false)\n    setWinningLottoNumberIsNotNumberError(false)\n    setWinningLottoNumberIsNotBeInLottoScopeError(false)\n    setWinningLottoNumberHasDuplicationNumberError(false)\n    setBonusBallIsBlankError(false)\n    setBonusBallIsNotNumberError(false)\n    setBonusBallIsNotBeInLottoSopeError(false)\n\n    const validatedWinningLottoNumber = validateLottoNumber(\n      winningLottoNumbers,\n      LOTTO_COUNT,\n      LOTTO_NUMBERS\n    )\n    if (validatedWinningLottoNumber === 'LOTTO_NUMBER_IS_BLANK_ERROR') {\n      return setWinningLottoNumberIsBlankError(true)\n    }\n    if (validatedWinningLottoNumber === 'LOTTO_NUMBER_IS_GREATER_THAN_LOTTO_COUNT') {\n      return setWinningLottoNumberIsGreaterThanLottoCountError(true)\n    }\n    if (validatedWinningLottoNumber === 'LOTTO_NUMBER_IS_LESS_THAN_LOTTO_COUNT') {\n      return setWinningLottoNumberIsLessThanLottoCountError(true)\n    }\n    if (validatedWinningLottoNumber === 'LOTTO_NUMBER_IS_NOT_NUMBER_ERROR') {\n      return setWinningLottoNumberIsNotNumberError(true)\n    }\n    if (validatedWinningLottoNumber === 'LOTTO_NUMBER_IS_NOT_BE_IN_LOTTO_SCOPE_ERROR') {\n      return setWinningLottoNumberIsNotBeInLottoScopeError(true)\n    }\n    if (validatedWinningLottoNumber === 'LOTTO_NUMBER_HAS_DUPLICATION_NUMBER_ERROR') {\n      return setWinningLottoNumberHasDuplicationNumberError(true)\n    }\n\n    const validatedBonusBall = validateBonusBallInput(\n      validatedWinningLottoNumber,\n      bonusBall,\n      LOTTO_NUMBERS\n    )\n    if (validatedBonusBall === 'BONUS_BALL_IS_BLANK_ERROR') {\n      return setBonusBallIsBlankError(true)\n    }\n    if (validatedBonusBall === 'BONUS_BALL_IS_NOT_NUMBER_ERROR') {\n      return setBonusBallIsNotNumberError(true)\n    }\n    if (validatedBonusBall === 'BONUS_BALL_IS_NOT_BE_IN_LOTTO_SCOPE_ERROR') {\n      return setBonusBallIsNotBeInLottoSopeError(true)\n    }\n    if (validatedBonusBall === 'WINNING_LOTTO_NUMBER_HAS_BONUS_BALL_ERROR') {\n      return setWinningLottoNumberHasBounsBallError(true)\n    }\n\n    const winningLotto = new WinningLotto(\n      new Lotto(winningLottoNumbers.split(',').map((item) => Number(item))),\n      Number(bonusBall)\n    )\n    for (let i = 0; i < myLottos.length; i++) {\n      RANKS[winningLotto.match(myLottos[i])]++\n    }\n    setRanks(RANKS)\n    setGotResult(true)\n  }\n\n  return (\n    <div>\n      <form onSubmit={onSubmitPurchaseAmount}>\n        <label htmlFor=\"purchaseAmoutInput\">구입 금액을 입력해주세요. </label>\n        <input\n          id=\"purchaseAmoutInput\"\n          type=\"text\"\n          value={purchaseAmount}\n          onChange={onChangePurchaseAmount}\n        ></input>\n        <button type=\"submit\">입력</button>\n      </form>\n      {purchaseAmountIsBlankError && (\n        <div style={{ color: 'red' }}>구입 금액을 입력하지 않았습니다.</div>\n      )}\n      {purchaseAmountIsNotNumberError && (\n        <div style={{ color: 'red' }}>구입 금액은 숫자로 입력해주세요.</div>\n      )}\n      {purchaseAmountIsLessThanMinimumAmountError && (\n        <div style={{ color: 'red' }}>로또 최소 구입 가격은 {LOTTO_PRICE}원입니다.</div>\n      )}\n      {gotALottoCount && (\n        <form onSubmit={onSubmitManualLottoCount}>\n          <label htmlFor=\"manualLottoCountInput\">수동으로 구매할 로또 수를 입력해주세요. </label>\n          <input\n            id=\"manualLottoCountInput\"\n            type=\"text\"\n            value={manualLottoCount}\n            onChange={onChangeManualLottoCount}\n          ></input>\n          <button type=\"submit\">입력</button>\n        </form>\n      )}\n      {manualLottoCountIsBlankError && (\n        <div style={{ color: 'red' }}>수동으로 구매할 로또 수를 입력하지 않았습니다.</div>\n      )}\n      {manualLottoCountIsNotNumberError && (\n        <div style={{ color: 'red' }}>수동으로 구매할 로또 수는 숫자로 입력해주세요.</div>\n      )}\n      {manualLottoCountIsGreaterThanLottoCountError && (\n        <div style={{ color: 'red' }}>{lottoCount}개보다 작게 입력해주세요.</div>\n      )}\n      {manualLottos.length > 0 && (\n        <form onSubmit={onSubmitManualLottos}>\n          {manualLottos.map((manualLotto, i) => {\n            return (\n              <div key={i}>\n                <label htmlFor={'manualLottoNumber' + i}>\n                  수동으로 구매할 번호를 입력해주세요.\n                </label>\n                <input\n                  style={{ width: '200px' }}\n                  id={'manualLottoNumber' + i}\n                  type=\"text\"\n                  onChange={onChangeManualLottoNumber}\n                ></input>\n              </div>\n            )\n          })}\n          <button type=\"submit\">입력</button>\n        </form>\n      )}\n      {manualLottoNumberIsBlankError && (\n        <div style={{ color: 'red' }}>입력하지 않은 번호가 있습니다.</div>\n      )}\n      {manualLottoNumberIsGreaterThanLottoCountError && (\n        <div style={{ color: 'red' }}>로또 개수는 {LOTTO_COUNT}개로 입력해주세요.</div>\n      )}\n      {manualLottoNumberIsLessThanLottoCountError && (\n        <div style={{ color: 'red' }}>로또 개수는 {LOTTO_COUNT}개로 입력해주세요.</div>\n      )}\n      {manualLottoNumberIsNotNumberError && (\n        <div style={{ color: 'red' }}>수동으로 구매할 번호는 숫자와 ,로 입력해주세요.</div>\n      )}\n      {manualLottoNumberIsNotBeInLottoScopeError && (\n        <div style={{ color: 'red' }}>\n          로또는 1부터 {LOTTO_MAX_NUMBER} 사이의 숫자를 입력해주세요.\n        </div>\n      )}\n      {manualLottoNumberHasDuplicationNumberError && (\n        <div style={{ color: 'red' }}>중복된 로또 번호가 있습니다.</div>\n      )}\n      {gotManualLottos && (\n        <div>\n          <div>\n            수동으로 {manualLottoCount}장, 자동으로 {lottoCount - Number(manualLottoCount)}개를\n            구매했습니다.\n          </div>\n          <div>\n            {myLottos.map((myLotto, i) => {\n              return <div key={i}>[{myLotto.numbers.join(', ')}]</div>\n            })}\n          </div>\n          <form onSubmit={onSubmitWinningLotto}>\n            <div>\n              <label htmlFor=\"winningLottoInput\">지난 주 당첨번호를 입력해주세요.</label>\n              <input\n                style={{ width: '200px' }}\n                id=\"winningLottoInput\"\n                type=\"text\"\n                value={winningLottoNumbers}\n                onChange={onChangeWinningLottoNumbers}\n              ></input>\n            </div>\n            <div>\n              <label htmlFor=\"bonusBallInput\">보너스 볼을 입력해주세요.</label>\n              <input\n                id=\"bonusBallInput\"\n                type=\"text\"\n                value={bonusBall}\n                onChange={onChangeBonusBall}\n              ></input>\n            </div>\n            <button type=\"submit\">입력</button>\n          </form>\n        </div>\n      )}\n      {winningLottoNumberIsBlankError && (\n        <div style={{ color: 'red' }}>입력하지 않은 번호가 있습니다.</div>\n      )}\n      {winningLottoNumberIsGreaterThanLottoCountError && (\n        <div style={{ color: 'red' }}>당첨 번호는 {LOTTO_COUNT - 1}개로 입력해주세요.</div>\n      )}\n      {winningLottoNumberIsLessThanLottoCountError && (\n        <div style={{ color: 'red' }}>당첨 번호는 {LOTTO_COUNT - 1}개로 입력해주세요.</div>\n      )}\n      {winningLottoNumberIsNotNumberError && (\n        <div style={{ color: 'red' }}>당첨 번호는 숫자와 ,로 입력해주세요.</div>\n      )}\n      {winningLottoNumberIsNotBeInLottoScopeError && (\n        <div style={{ color: 'red' }}>\n          로또는 1부터 {LOTTO_MAX_NUMBER} 사이의 숫자를 입력해주세요.\n        </div>\n      )}\n      {winningLottoNumberHasDuplicationNumberError && (\n        <div style={{ color: 'red' }}>중복된 로또 번호가 있습니다.</div>\n      )}\n      {bonusBallIsBlankError && <div style={{ color: 'blue' }}>보너스볼을 입력해주세요.</div>}\n      {bonusBallIsNotNumberError && (\n        <div style={{ color: 'blue' }}>보너스볼은 숫자로 입력해주세요.</div>\n      )}\n      {bonusBallIsNotBeInLottoSopeError && (\n        <div style={{ color: 'blue' }}>\n          보너스볼은 1부터 {LOTTO_MAX_NUMBER} 사이의 숫자를 입력해주세요.\n        </div>\n      )}\n      {winningLottoNumberHasBounsBallError && (\n        <div style={{ color: 'blue' }}>보너스볼은 당첨 번호와 다른 숫자로 입력해주세요.</div>\n      )}\n      {gotResult && (\n        <div>\n          <div style={{ marginTop: '20px' }}>당첨 통계</div>\n          <div>--------</div>\n          <div>3개 일치 (5000원) - {ranks.FIFTH}</div>\n          <div>4개 일치 (50000원) - {ranks.FOURTH}</div>\n          <div>5개 일치 (1500000원) - {ranks.THIRD}</div>\n          <div>5개 일치, 보너스볼 일치 (30000000원) - {ranks.SECOND}</div>\n          <div>6개 일치 (2000000000원) - {ranks.FIRST}</div>\n          <div>\n            총 수익률은{' '}\n            {Math.floor(\n              ((ranks.FIFTH * 5000 +\n                ranks.FOURTH * 50000 +\n                ranks.THIRD * 1500000 +\n                ranks.SECOND * 30000000 +\n                ranks.FIRST * 2000000000) /\n                Number(purchaseAmount)) *\n                100\n            )}\n            % 입니다.\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './containers/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}